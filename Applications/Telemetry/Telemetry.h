/** @file Telemetry.h
 * 	@brief Faraday telemetry application
 *
 * 	This application provides the telemetry data application functions for Faraday. Sensors and other
 * 	data are gathered, packetized, and transfered to the intended path for telemetry purposes.
 *
 */

#ifndef APPLICATIONS_TELEMETRY_H_
#define APPLICATIONS_TELEMETRY_H_

//volatile extern unsigned char app_telem_uart_boot_bits;
//volatile extern unsigned char app_telem_rf_boot_bits;


/** @name Misc. Telemetry Constants
*
* 	Constants used for the telemetry application functionality that don't fall into their own specific sub-group.
*
@{**/
#define CHARSIZE 1 /**< Size of a char for memory copy applications (Needed?) */
#define TELEM_UART_SERVICE_NUMBER 5 /**< UART layer 4 service port number used by the telemetry application */
/** @}*/




/** @name Telemetry Packet Definition Constants
*
* 	Constants that define the telemetry packets that form the telemetry available from Faraday.
*
@{**/
#define APP_TELEM_PACKET_LEN 123 /**< Length in bytes of the main telemetry application packet used to encapsulate telemetry data packets*/
#define APP_TELEM_PACKET_PAYLOAD_LEN 118 /**< Length in bytes of the payload field of the main telemetry application packet */
#define APP_TELEM_PACKET_TYPE_2_LEN 14 /**< Length in bytes of the telemetry application packet type #2 */
#define APP_TELEM_PACKET_TYPE_3_LEN 91 + 6 /**< Length in bytes of the telemetry application packet type #3 */
#define APP_TELEM_PACKET_FIFO_COUNT 1 /**< Telemetry application FIFO buffer element size count */
/** @}*/


/** @brief Structure that defines GPIO and RF state
 *
 *	This is a sub-packet strutucture that creates a sub-packet for creating larger telemetry packets that need
 *	to include GPIO and SYSTEM RF state data.
 *
 *	@todo Is this really useful/needed?
 *
 */
typedef struct TELEMETRY {
	unsigned char temp_0[64]; /**< Telem 0 bytearry (needed?) */
	unsigned char temp_1[64]; /**< Telem 1 bytearry (needed?) */
	unsigned char GPIO_State; /**< General purpose input/output state bitmask*/
	unsigned char IO_State; /**< IO state bitmask*/
	unsigned char RF_State; /**< RF state bitmask */
} TELEMETRYDATA;


/** @brief Main telemetry application packet
 *
 *	This packet is used to encapsulate all telemetry data packet types. Basic telemetry source information and data integrity fields
 *	are provided that envolope all smaller encapsulated packets in a single location.
 *
 */
typedef struct TELEMETRY_PACKET_DATAGRAM {
	unsigned char packet_type; /**< Packet type field */
	unsigned char rf_source; /**< Packet source field: 0 = UART source | 1 = RF source */
	unsigned char data_length; /**< Length of the payload in the data bytearray field in bytes */
	unsigned char data[APP_TELEM_PACKET_PAYLOAD_LEN]; /**< data bytearray field that holds the encapsulation telemetry data/packets */
	unsigned char error_detection_16[2]; /**< Error detection byte array (2 byte / 16 bit) */
} TELEMETRY_PACKET_DATAGRAM_STRUCT;


/** @brief System information telemetry packet
 *
 *	This packet structure holds basic current system information such as operating
 *	frequency and power levels.
 *
 *	@note At this time this packet is focused more for local UART tranmission
 *
 */
typedef struct TELEMETRY_PACKET_1 {
	unsigned char rf_freq2; /**< CC430 radio module frequency register value index [2] */
	unsigned char rf_freq1; /**< CC430 radio module frequency register value index [1] */
	unsigned char rf_freq0; /**< CC430 radio module frequency register value index [0] */
	unsigned char rf_pwr; /**< CC430 radio module power setting (PATable) */
} TELEMETRY_PACKET_1_STRUCT;


/** @brief Device debugging packet
 *
 *	This packet structure contains device debugging information that is stored in flash memory and controlled by the
 *	device_config.h application. Statistics such as boot counts, resets, and other information allow for long-term
 *	device diagnostics.
 *
 *	@note At this time this packet is focused more for local UART tranmission
 *
 */
typedef struct TELEMETRY_PACKET_2 {
	unsigned int boot_cnt; /**<  */
	unsigned char reset_cnt; /**<  */
	unsigned char BOR; /**<  */
	unsigned char RSTNMI; /**<  */
	unsigned char SVSL; /**<  */
	unsigned char SVSH; /**<  */
	unsigned char SVML_OVP; /**<  */
	unsigned char SVMH_OVP; /**<  */
	unsigned char WDT_TIMEOUT; /**<  */
	unsigned char FLASHKEY; /**<  */
	unsigned char FLL_UNLOCK; /**<  */
	unsigned char PERIPH_CONFIG; /**<  */
	unsigned char ACCESS_VIOLATION; /**<  */
} TELEMETRY_PACKET_2_STRUCT;


/** @brief Main Faraday telemetry packet
 *
 *	This packet structure contains the basic telemetry data for Faraday and is the main telemetry generated by
 *	a Faraday. Data such as packet/device time, GPS location, ADC/GPIO telemetry, application data, etc... are
 *	common telemetry data to find in this packet.
 *
 */
typedef struct TELEMETRY_PACKET_3 {
	char source_callsign[9]; /**<  */
	unsigned char source_callsign_length; /**<  */
	unsigned char source_callsign_id; /**<  */
	char destination_callsign[9]; /**<  */
	unsigned char destination_callsign_length; /**<  */
	unsigned char destination_callsign_id; /**<  */
	unsigned char rtc_second; /**<  */
	unsigned char rtc_minute; /**<  */
	unsigned char rtc_hour; /**<  */
	unsigned char rtc_day; /**<  */
	unsigned char rtc_dow; /**<  */
	unsigned char rtc_month; /**<  */
	unsigned int rtc_year; /**<  */
	char gps_lattitude[9]; /**<  */
	char gps_lattitude_dir; /**<  */
	char gps_longitude[10]; /**<  */
	char gps_longitude_dir; /**<  */
	char gps_altitude[8]; /**<  */
	char gps_altitude_units; /**<  */
	char gps_speed[5]; /**<  */
	char gps_fix; /**<  */
	char gps_hdop[4]; /**<  */
	unsigned char gpio_state; /**<  */
	unsigned char io_state; /**<  */
	unsigned char rf_state; /**<  */
	unsigned char adc_0[2]; /**<  */
	unsigned char adc_1[2]; /**<  */
	unsigned char adc_2[2]; /**<  */
	unsigned char adc_3[2]; /**<  */
	unsigned char adc_4[2]; /**<  */
	unsigned char adc_5[2]; /**<  */
	unsigned char adc_6[2]; /**<  */
	unsigned char adc_7[2]; /**<  */
	unsigned char adc_8[2]; /**<  */
	unsigned char HAB_DATA[6]; /**<  */
	//unsigned char error_detection[2];
} TELEMETRY_PACKET_3_STRUCT;


/**@brief Initialize the telemetry application
 *
 *	This function is used to initialize the telemetry application and any needed setup configuration.
 *
 */
void application_telemetry_initialize(void);


/**@brief Initialize telemetry application FIFO buffers
 *
 *	This function initializes the FIFO buffers used by the telemetry application.
 *
 */
void init_app_telem_fifo(void);


/**@brief Telemetry application housekeeping routine
 *
 *	This function performs the housekeeping needs for the telemetry application such as checking FIFO
 *	buffers for waiting data and performing the intended actions on that data. This function should
 *	be run regularly.
 *
 */
void app_telem_housekeeping(void);


/**@brief UART TX flow control buffer Put() for telemetry packets
 *
 * This function is used to place a telemetry packet for transmission into the FIFO buffer and acts as a flow
 * control mechanism of the telemetry application's access to the UART peripheral.
 *
 * @param packet A pointer to the packet bytearray to be placed into the FIFO
 *
 */
void application_send_uart_packet(unsigned char *packet);


/**@brief Create and send a telemetry packet #1 (system settings) over UART
 *
 *	This packet is used to both create a system settings packet and then place it into the UART transmit queue.
 *
 */
void application_send_telemetry_packet_1(void);


/**@brief Create and send a telemetry packet #2 (device debugging) over UART
 *
 *	This packet is used to both create a device debugging packet and then place it into the UART transmit queue.
 *
 */
void application_send_telemetry_device_debug(void);


/**@brief Create and send a telemetry packet #3 (Faraday telemetry) over UART
 *
 *	This packet is used to both create a Faraday telemetry packet and then place it into the UART transmit queue
 *	in a single function call.
 *
 */
void application_send_telemetry_3(void);


/**@brief Create a system settings packet
 *
 *	This function creates a current system settings packet and places the packet into the supplied bytearray.
 *
 *	@param packet A pointer to the byte array where the created packet will be saved into
 *
 */
void application_telem_create_pkt_1(unsigned char *packet);


/**@brief Create a device debugging packet
 *
 *	Creates a device debugging packet and places the packet into the supplied bytearray.
 *
 *	@param packet A pointer to the byte array where the created packet will be saved into
 *
 */
void application_telem_create_pkt_2(unsigned char *packet);


/**@brief Create a Faraday telemetry packet for RF or remote transmission
 *
 *	Creates a Faraday telemetry packet and places the packet into the supplied bytearray. This function is specifically
 *	focused on providing additonal function arguments that allows RF telemetry a properaly formatted source and destination.
 *
 *	@param packet A pointer to the byte array where the created packet will be saved into
 *	@param src_callsign Local device callsign
 *	@param src_callsign_len Local device callsign length in bytes
 *	@param src_callsign_id Local device callsign ID number
 *	@param dest_callsign Destination device callsign
 *	@param dest_callsign_len Destination device callsign length in bytes
 *	@param dest_callsign_id Destination device callsign device ID number
 *
 */
void application_telem_create_rf_pkt(unsigned char *packet, char *src_callsign, unsigned char src_callsign_len, unsigned char src_callsign_id, char *dest_callsign, unsigned char dest_callsign_len, unsigned char dest_callsign_id);




/**@brief Update local device RTC time with a valid GPS time
 *
 *	This function updates the local device real time clock with GPS time if a valid lock is present.
 *
 */
void application_update_RTC_calender_gps(void);


/**@brief Create and send over UART a Faraday telemetry packet
 *
 *	This function is used to both create and send over UART a Faraday telemetry packet in a single function call.
 *
 */
void application_telemetry_send_self(void);


/**@brief Create and send over UART a device debug packet
 *
 *	This function is used to both create and send over UART a device debugging packet in a single function call.
 *
 */
void application_telemetry_send_device_debug_telem(void);


/**@brief Telemetry application housekeeping routing for 1Hz timing
 *
 *	This housekeeping function must be run once every second and provides a 1Hz housekeeping routine. 1hz housekeeping
 *	is used to enable the beacon telemetry that automatically creates and transfers telemetry packets at a set interval.
 *
 */
void application_telemetry_uart_housekeeping_1hz_interval(void);


#endif /* APPLICATIONS_TELEMETRY_TELEMETRY_H_ */
